sequenceDiagram
    participant CP as Computing Provider
    participant AM as AccessManager
    participant WM as WhitelistManager
    participant NE as NodeEscrow
    participant NM as NodeManager
    participant EM as EpochManager
    participant LM as LeaderManager
    participant JM as JobManager
    participant JE as JobEscrow
    participant IM as IncentiveManager
    participant LT as LuminoToken

    Note over CP: Node Registration Phase
    CP->>WM: requireWhitelisted()
    CP->>LT: approve(nodeEscrow, amount)
    CP->>NE: deposit(stakeAmount)
    CP->>NM: registerNode(computeRating)
    NM->>NE: requireBalance(cp, stakeAmount)
    NM->>WM: requireWhitelisted(cp)

    Note over CP: Epoch Commit Phase
    CP->>EM: getEpochState()
    CP->>LM: submitCommitment(nodeId, commitment)
    LM->>EM: validateEpochState(COMMIT)
    LM->>NM: validateNodeOwner(nodeId, sender)
    LM->>WM: requireWhitelisted(cp)
    LM->>NE: requireBalance(cp, stake)

    Note over CP: Epoch Reveal Phase
    CP->>EM: getEpochState()
    CP->>LM: revealSecret(nodeId, secret)
    LM->>EM: validateEpochState(REVEAL)
    LM->>NM: validateNodeOwner(nodeId, sender)

    Note over CP: Epoch Elect Phase
    CP->>EM: getEpochState()
    CP->>LM: electLeader()
    LM->>EM: validateEpochState(ELECT)

    Note over CP: Epoch Execute Phase
    CP->>EM: getEpochState()
    CP->>LM: validateLeader(caller)
    CP->>JM: startAssignmentRound()
    JM->>EM: validateEpochState(EXECUTE)
    JM->>LM: validateLeader(caller)
    JM->>LM: getFinalRandomValue(epoch)
    JM->>NM: getNodesInPool(poolId)

    Note over CP: Epoch Confirm Phase
    CP->>EM: getEpochState()
    CP->>JM: confirmJob(jobId)
    JM->>EM: validateEpochState(CONFIRM)
    JM->>NM: validateNodeOwner(nodeId, caller)
    CP->>JM: completeJob(jobId)
    JM->>NM: validateNodeOwner(nodeId, caller)

    Note over CP: Epoch Dispute Phase
    CP->>EM: getEpochState()
    CP->>IM: processAll()
    IM->>JM: wasAssignmentRoundStarted(epoch)
    IM->>LM: getCurrentLeader()
    IM->>NM: getNodeOwner(nodeId)
    IM->>JM: getUnconfirmedJobs(epoch)
    IM->>NE: applyPenalty(cp, amount, reason)
    IM->>NE: applyReward(cp, amount, reason)

    Note over CP: Job Processing
    CP->>JE: deposit(amount)
    CP->>JM: submitJob(args, model, pool)
    JE->>LT: transferFrom(from, to, amount)
    JM->>JE: releasePayment(from, to, amount)

    Note over CP: Node Management
    CP->>NM: unregisterNode(nodeId)
    NM->>NE: requireBalance(cp, stake)
    CP->>NE: requestWithdraw(amount)
    CP->>NE: cancelWithdraw()
    CP->>NE: withdraw()
    NE->>LT: transfer(to, amount)